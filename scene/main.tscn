[gd_scene load_steps=8 format=3 uid="uid://d4ju3t7tn4p7n"]

[ext_resource type="Script" uid="uid://tsiux4pale7m" path="res://script/SolarSystem.gd" id="1_0ha60"]
[ext_resource type="PackedScene" uid="uid://cag0o1rt8kaol" path="res://scene/ship.tscn" id="1_itxqv"]
[ext_resource type="Texture2D" uid="uid://bpj60xeep7b5h" path="res://assets/starfield_tile.png" id="2_0ha60"]
[ext_resource type="PackedScene" uid="uid://eqv106qo08fm" path="res://scene/planet.tscn" id="3_brvut"]
[ext_resource type="Script" uid="uid://ccey22v3wjvvc" path="res://script/TrajectoryLine.gd" id="5_4j5ol"]
[ext_resource type="Script" uid="uid://8v5m3eriooar" path="res://script/UI.gd" id="7_p1hux"]

[sub_resource type="GDScript" id="GDScript_4j5ol"]
script/source = "extends Node

@onready var solar_system = get_parent()
@onready var ship = solar_system.get_node(\"Ship\")

var planets = []
var initial_data: OrbitalPhysics.OrbitalData
var log_timer: float = 0.0
var setup_timer: float = 0.0
var orbit_rotations: float = 0.0
var last_angle: float = 0.0

func _ready():
	# More robust planet detection
	for child in solar_system.get_children():
		if child.has_method(\"get_radius\") and child.has_method(\"get_global_position\"):
			planets.append(child)
	print(\"OrbitDebug: Found %d planets\" % planets.size())

func _physics_process(delta):
	if planets.size() == 0: return
	
	# Wait for setup
	if setup_timer < 0.1:
		setup_timer += delta
		return
	
	# Establish baseline once
	if not initial_data:
		initial_data = OrbitalPhysics.analyze_orbit(ship.global_position, ship.linear_velocity, planets)
		if initial_data.primary:
			var r = ship.global_position - initial_data.primary.global_position
			last_angle = atan2(r.y, r.x)
		print(\"OrbitDebug: Baseline - Energy=%.1f\" % initial_data.energy)
		return
	
	# Log periodically
	log_timer += delta
	if log_timer >= 0.4:
		log_timer = 0.0
		log_status()

func log_status():
	var data = OrbitalPhysics.analyze_orbit(ship.global_position, ship.linear_velocity, planets)
	if not data.primary: return
	
	var r = ship.global_position - data.primary.global_position
	var dist = r.length()
	var speed = ship.linear_velocity.length()
	
	# Track orbit rotations
	var angle = atan2(r.y, r.x)
	var angle_diff = angle - last_angle
	if angle_diff > PI: angle_diff -= 2 * PI
	elif angle_diff < -PI: angle_diff += 2 * PI
	orbit_rotations += abs(angle_diff) / (2 * PI)
	last_angle = angle
	
	# Calculate drift
	var energy_drift = 0.0
	if abs(initial_data.energy) > 0.001:
		energy_drift = (data.energy - initial_data.energy) / abs(initial_data.energy) * 100.0
	
	print(\"=== Orbits: %.2f | Dist: %.1f | Speed: %.1f ===\" % [orbit_rotations, dist, speed])
	print(\"State: %s | Energy drift: %+.2f%%\" % [OrbitalPhysics.get_status_text(data), energy_drift])
	
	if abs(energy_drift) > 1.0:
		print(\"‚ö†Ô∏è HIGH ENERGY DRIFT!\")
	if dist < 100:
		print(\"üî• TOO CLOSE TO PLANET!\")
	print(\"---\")
"

[node name="Main" type="Node2D"]

[node name="SolarSystem" type="Node2D" parent="."]
script = ExtResource("1_0ha60")

[node name="Backgroud" type="TextureRect" parent="SolarSystem"]
clip_contents = true
custom_minimum_size = Vector2(3000, 1600)
offset_right = 256.0
offset_bottom = 256.0
scale = Vector2(0.25, 0.25)
texture = ExtResource("2_0ha60")
stretch_mode = 1

[node name="Ship" parent="SolarSystem" instance=ExtResource("1_itxqv")]
position = Vector2(101, 159)
can_sleep = false
linear_velocity = Vector2(0, 100)

[node name="Planet" parent="SolarSystem" instance=ExtResource("3_brvut")]
position = Vector2(471, 273)

[node name="OrbitDebug" type="Node" parent="SolarSystem"]
script = SubResource("GDScript_4j5ol")

[node name="TrajectoryLine" type="Line2D" parent="SolarSystem"]
script = ExtResource("5_4j5ol")

[node name="Planet2" parent="SolarSystem" instance=ExtResource("3_brvut")]
position = Vector2(144, 212)

[node name="Planet3" parent="SolarSystem" instance=ExtResource("3_brvut")]
position = Vector2(116, 40)

[node name="Planet4" parent="SolarSystem" instance=ExtResource("3_brvut")]
position = Vector2(633, 130)

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2(320, 180)

[node name="UI" type="CanvasLayer" parent="."]
script = ExtResource("7_p1hux")

[node name="Fuel" type="ProgressBar" parent="UI"]
custom_minimum_size = Vector2(20, 20)
offset_left = 10.0
offset_top = 102.0
offset_right = 54.0
offset_bottom = 262.0
step = 10.0
value = 50.0
rounded = true
fill_mode = 3

[node name="Speed" type="Label" parent="UI"]
custom_minimum_size = Vector2(20, 50)
offset_left = 9.0
offset_top = 7.0
offset_right = 49.0
offset_bottom = 57.0

[node name="OrbitalStatus" type="Label" parent="UI"]
offset_left = 302.0
offset_top = 13.0
offset_right = 342.0
offset_bottom = 36.0
